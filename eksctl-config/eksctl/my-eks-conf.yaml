---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: arghaya # name of cluster
  region: us-east-1
  version: "1.24" # kubernetes version
vpc: # Refer: https://github.com/weaveworks/eksctl/blob/main/examples/04-existing-vpc.yaml
  id: "vpc-00eebc33378705d0f"
  subnets:
    public:
      my-public-201-a:
        id: "subnet-0d6f3f1f963145caf"
        az: "us-east-1a"
      my-public-201-b:
        id: "subnet-0fbd1015d00c652e4"
        az: "us-east-1b"
    private:
      my-private-201-a:
        id: "subnet-069745fffcc0ff17e"
        az: "us-east-1a"
      my-private-201-b:
        id: "subnet-022a0bca7dbed8149"
        az: "us-east-1b"
  clusterEndpoints:
    publicAccess:  true
    privateAccess: true
  nat:
    gateway: Disable # disable since already created


nodeGroups: # Refer: https://github.com/weaveworks/eksctl/blob/main/examples/05-advanced-nodegroups.yaml
  - name: pvt-201-a-1
    labels: { role: workers }
    tags:
      k8s.io/cluster-autoscaler/enabled: "true" # tag is needed for cluster autoscaler. Refer: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md#auto-discovery-setup
      k8s.io/cluster-autoscaler/arghaya: "owned" # cluster name tag is optional in latest versions of EKS
    instancesDistribution:
      instanceTypes:
        - t3a.large
    desiredCapacity: 2
    minSize: 1
    maxSize: 3
    privateNetworking: true # include only in private subnet
    subnets:
      - my-private-201-a # 1 AZ is enough for testing
  - name: pub-201-a-1
    labels: { role: workers }
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/arghaya: "owned"
    instancesDistribution:
      instanceTypes:
        - t2.medium
    desiredCapacity: 0
    minSize: 0
    maxSize: 1
    subnets:
      - my-public-201-a
